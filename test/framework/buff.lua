local LevelBuff = require("framework.buff").LevelBuff
local StackBuff = require("framework.buff").StackBuff

TestCase("framework.buff.LevelBuff", function()
  local buff = LevelBuff:new()
  AssertEqual(buff.level, 0)
  buff:merge(10, 2)
  AssertEqual(buff.level, 0)
  Assert(buff:advance_timer())
  AssertEqual(buff.level, 10)
  Assert(buff:advance_timer())
  AssertEqual(buff.level, 10)
  Assert(not buff:advance_timer())
  AssertEqual(buff.level, 0)
  buff:merge(10, 3)
  AssertEqual(buff.level, 0)
  Assert(buff:advance_timer())
  AssertEqual(buff.level, 10)
  buff:merge(12, 1)
  AssertEqual(buff.level, 10)
  Assert(buff:advance_timer())
  AssertEqual(buff.level, 12)
  Assert(buff:advance_timer())
  AssertEqual(buff.level, 12)
  Assert(not buff:advance_timer())
  AssertEqual(buff.level, 0)
end)

TestCase("framework.buff.StackBuff", function()
  local buff = StackBuff:new()
  AssertEqual(buff.level, 0)
  buff:merge(10, 2)
  AssertEqual(buff.level, 0)
  Assert(buff:advance_timer())
  AssertEqual(buff.level, 10)
  Assert(buff:advance_timer())
  AssertEqual(buff.level, 10)
  Assert(not buff:advance_timer())
  AssertEqual(buff.level, 0)
  buff:merge(10, 3)
  AssertEqual(buff.level, 0)
  Assert(buff:advance_timer())
  AssertEqual(buff.level, 10)
  buff:merge(12, 1)
  AssertEqual(buff.level, 10)
  Assert(buff:advance_timer())
  AssertEqual(buff.level, 22)
  Assert(buff:advance_timer())
  AssertEqual(buff.level, 10)
  Assert(not buff:advance_timer())
  AssertEqual(buff.level, 0)
end)
